// Code generated by stanc v2.31.0-68-gbd516d56
#include <stan/model/model_header.hpp>
namespace multivariate_variant_multinomial_ncp_HV_model_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 126> locations_array__ =
  {" (found before start of program)",
  " (in '/Users/kjohnson/Documents/ppi-variant-tracker-manuscript/code/stancode/multivariate_variant_multinomial_ncp_HV.stan', line 64, column 2 to column 21)",
  " (in '/Users/kjohnson/Documents/ppi-variant-tracker-manuscript/code/stancode/multivariate_variant_multinomial_ncp_HV.stan', line 67, column 2 to column 19)",
  " (in '/Users/kjohnson/Documents/ppi-variant-tracker-manuscript/code/stancode/multivariate_variant_multinomial_ncp_HV.stan', line 68, column 2 to column 37)",
  " (in '/Users/kjohnson/Documents/ppi-variant-tracker-manuscript/code/stancode/multivariate_variant_multinomial_ncp_HV.stan', line 72, column 2 to column 38)",
  " (in '/Users/kjohnson/Documents/ppi-variant-tracker-manuscript/code/stancode/multivariate_variant_multinomial_ncp_HV.stan', line 73, column 2 to column 29)",
  " (in '/Users/kjohnson/Documents/ppi-variant-tracker-manuscript/code/stancode/multivariate_variant_multinomial_ncp_HV.stan', line 74, column 2 to column 27)",
  " (in '/Users/kjohnson/Documents/ppi-variant-tracker-manuscript/code/stancode/multivariate_variant_multinomial_ncp_HV.stan', line 84, column 2 to column 22)",
  " (in '/Users/kjohnson/Documents/ppi-variant-tracker-manuscript/code/stancode/multivariate_variant_multinomial_ncp_HV.stan', line 85, column 2 to column 36)",
  " (in '/Users/kjohnson/Documents/ppi-variant-tracker-manuscript/code/stancode/multivariate_variant_multinomial_ncp_HV.stan', line 86, column 2 to column 24)",
  " (in '/Users/kjohnson/Documents/ppi-variant-tracker-manuscript/code/stancode/multivariate_variant_multinomial_ncp_HV.stan', line 96, column 2 to column 22)",
  " (in '/Users/kjohnson/Documents/ppi-variant-tracker-manuscript/code/stancode/multivariate_variant_multinomial_ncp_HV.stan', line 97, column 2 to column 22)",
  " (in '/Users/kjohnson/Documents/ppi-variant-tracker-manuscript/code/stancode/multivariate_variant_multinomial_ncp_HV.stan', line 98, column 2 to column 28)",
  " (in '/Users/kjohnson/Documents/ppi-variant-tracker-manuscript/code/stancode/multivariate_variant_multinomial_ncp_HV.stan', line 105, column 2 to column 37)",
  " (in '/Users/kjohnson/Documents/ppi-variant-tracker-manuscript/code/stancode/multivariate_variant_multinomial_ncp_HV.stan', line 110, column 2 to column 62)",
  " (in '/Users/kjohnson/Documents/ppi-variant-tracker-manuscript/code/stancode/multivariate_variant_multinomial_ncp_HV.stan', line 121, column 2 to column 77)",
  " (in '/Users/kjohnson/Documents/ppi-variant-tracker-manuscript/code/stancode/multivariate_variant_multinomial_ncp_HV.stan', line 209, column 2 to column 44)",
  " (in '/Users/kjohnson/Documents/ppi-variant-tracker-manuscript/code/stancode/multivariate_variant_multinomial_ncp_HV.stan', line 212, column 2 to column 43)",
  " (in '/Users/kjohnson/Documents/ppi-variant-tracker-manuscript/code/stancode/multivariate_variant_multinomial_ncp_HV.stan', line 217, column 2 to column 33)",
  " (in '/Users/kjohnson/Documents/ppi-variant-tracker-manuscript/code/stancode/multivariate_variant_multinomial_ncp_HV.stan', line 219, column 2 to column 25)",
  " (in '/Users/kjohnson/Documents/ppi-variant-tracker-manuscript/code/stancode/multivariate_variant_multinomial_ncp_HV.stan', line 220, column 2 to column 23)",
  " (in '/Users/kjohnson/Documents/ppi-variant-tracker-manuscript/code/stancode/multivariate_variant_multinomial_ncp_HV.stan', line 228, column 2 to column 57)",
  " (in '/Users/kjohnson/Documents/ppi-variant-tracker-manuscript/code/stancode/multivariate_variant_multinomial_ncp_HV.stan', line 231, column 2 to column 26)",
  " (in '/Users/kjohnson/Documents/ppi-variant-tracker-manuscript/code/stancode/multivariate_variant_multinomial_ncp_HV.stan', line 232, column 2 to column 23)",
  " (in '/Users/kjohnson/Documents/ppi-variant-tracker-manuscript/code/stancode/multivariate_variant_multinomial_ncp_HV.stan', line 237, column 11 to column 16)",
  " (in '/Users/kjohnson/Documents/ppi-variant-tracker-manuscript/code/stancode/multivariate_variant_multinomial_ncp_HV.stan', line 237, column 4 to column 23)",
  " (in '/Users/kjohnson/Documents/ppi-variant-tracker-manuscript/code/stancode/multivariate_variant_multinomial_ncp_HV.stan', line 238, column 11 to column 16)",
  " (in '/Users/kjohnson/Documents/ppi-variant-tracker-manuscript/code/stancode/multivariate_variant_multinomial_ncp_HV.stan', line 238, column 4 to column 22)",
  " (in '/Users/kjohnson/Documents/ppi-variant-tracker-manuscript/code/stancode/multivariate_variant_multinomial_ncp_HV.stan', line 240, column 11 to column 15)",
  " (in '/Users/kjohnson/Documents/ppi-variant-tracker-manuscript/code/stancode/multivariate_variant_multinomial_ncp_HV.stan', line 240, column 4 to column 21)",
  " (in '/Users/kjohnson/Documents/ppi-variant-tracker-manuscript/code/stancode/multivariate_variant_multinomial_ncp_HV.stan', line 242, column 4 to column 29)",
  " (in '/Users/kjohnson/Documents/ppi-variant-tracker-manuscript/code/stancode/multivariate_variant_multinomial_ncp_HV.stan', line 243, column 4 to column 34)",
  " (in '/Users/kjohnson/Documents/ppi-variant-tracker-manuscript/code/stancode/multivariate_variant_multinomial_ncp_HV.stan', line 248, column 6 to column 17)",
  " (in '/Users/kjohnson/Documents/ppi-variant-tracker-manuscript/code/stancode/multivariate_variant_multinomial_ncp_HV.stan', line 250, column 6 to column 47)",
  " (in '/Users/kjohnson/Documents/ppi-variant-tracker-manuscript/code/stancode/multivariate_variant_multinomial_ncp_HV.stan', line 252, column 6 to column 48)",
  " (in '/Users/kjohnson/Documents/ppi-variant-tracker-manuscript/code/stancode/multivariate_variant_multinomial_ncp_HV.stan', line 259, column 12 to column 76)",
  " (in '/Users/kjohnson/Documents/ppi-variant-tracker-manuscript/code/stancode/multivariate_variant_multinomial_ncp_HV.stan', line 257, column 32 to line 262, column 9)",
  " (in '/Users/kjohnson/Documents/ppi-variant-tracker-manuscript/code/stancode/multivariate_variant_multinomial_ncp_HV.stan', line 257, column 8 to line 262, column 9)",
  " (in '/Users/kjohnson/Documents/ppi-variant-tracker-manuscript/code/stancode/multivariate_variant_multinomial_ncp_HV.stan', line 255, column 23 to line 263, column 7)",
  " (in '/Users/kjohnson/Documents/ppi-variant-tracker-manuscript/code/stancode/multivariate_variant_multinomial_ncp_HV.stan', line 255, column 6 to line 263, column 7)",
  " (in '/Users/kjohnson/Documents/ppi-variant-tracker-manuscript/code/stancode/multivariate_variant_multinomial_ncp_HV.stan', line 245, column 36 to line 264, column 5)",
  " (in '/Users/kjohnson/Documents/ppi-variant-tracker-manuscript/code/stancode/multivariate_variant_multinomial_ncp_HV.stan', line 245, column 4 to line 264, column 5)",
  " (in '/Users/kjohnson/Documents/ppi-variant-tracker-manuscript/code/stancode/multivariate_variant_multinomial_ncp_HV.stan', line 234, column 15 to line 265, column 3)",
  " (in '/Users/kjohnson/Documents/ppi-variant-tracker-manuscript/code/stancode/multivariate_variant_multinomial_ncp_HV.stan', line 234, column 2 to line 265, column 3)",
  " (in '/Users/kjohnson/Documents/ppi-variant-tracker-manuscript/code/stancode/multivariate_variant_multinomial_ncp_HV.stan', line 135, column 11 to column 16)",
  " (in '/Users/kjohnson/Documents/ppi-variant-tracker-manuscript/code/stancode/multivariate_variant_multinomial_ncp_HV.stan', line 135, column 4 to column 23)",
  " (in '/Users/kjohnson/Documents/ppi-variant-tracker-manuscript/code/stancode/multivariate_variant_multinomial_ncp_HV.stan', line 136, column 11 to column 16)",
  " (in '/Users/kjohnson/Documents/ppi-variant-tracker-manuscript/code/stancode/multivariate_variant_multinomial_ncp_HV.stan', line 136, column 4 to column 22)",
  " (in '/Users/kjohnson/Documents/ppi-variant-tracker-manuscript/code/stancode/multivariate_variant_multinomial_ncp_HV.stan', line 140, column 11 to column 15)",
  " (in '/Users/kjohnson/Documents/ppi-variant-tracker-manuscript/code/stancode/multivariate_variant_multinomial_ncp_HV.stan', line 140, column 4 to column 21)",
  " (in '/Users/kjohnson/Documents/ppi-variant-tracker-manuscript/code/stancode/multivariate_variant_multinomial_ncp_HV.stan', line 146, column 6 to column 31)",
  " (in '/Users/kjohnson/Documents/ppi-variant-tracker-manuscript/code/stancode/multivariate_variant_multinomial_ncp_HV.stan', line 147, column 6 to column 36)",
  " (in '/Users/kjohnson/Documents/ppi-variant-tracker-manuscript/code/stancode/multivariate_variant_multinomial_ncp_HV.stan', line 156, column 10 to column 21)",
  " (in '/Users/kjohnson/Documents/ppi-variant-tracker-manuscript/code/stancode/multivariate_variant_multinomial_ncp_HV.stan', line 159, column 10 to column 51)",
  " (in '/Users/kjohnson/Documents/ppi-variant-tracker-manuscript/code/stancode/multivariate_variant_multinomial_ncp_HV.stan', line 164, column 10 to column 46)",
  " (in '/Users/kjohnson/Documents/ppi-variant-tracker-manuscript/code/stancode/multivariate_variant_multinomial_ncp_HV.stan', line 153, column 28 to line 166, column 9)",
  " (in '/Users/kjohnson/Documents/ppi-variant-tracker-manuscript/code/stancode/multivariate_variant_multinomial_ncp_HV.stan', line 153, column 8 to line 166, column 9)",
  " (in '/Users/kjohnson/Documents/ppi-variant-tracker-manuscript/code/stancode/multivariate_variant_multinomial_ncp_HV.stan', line 150, column 19 to line 167, column 7)",
  " (in '/Users/kjohnson/Documents/ppi-variant-tracker-manuscript/code/stancode/multivariate_variant_multinomial_ncp_HV.stan', line 150, column 6 to line 167, column 7)",
  " (in '/Users/kjohnson/Documents/ppi-variant-tracker-manuscript/code/stancode/multivariate_variant_multinomial_ncp_HV.stan', line 143, column 17 to line 168, column 5)",
  " (in '/Users/kjohnson/Documents/ppi-variant-tracker-manuscript/code/stancode/multivariate_variant_multinomial_ncp_HV.stan', line 143, column 4 to line 168, column 5)",
  " (in '/Users/kjohnson/Documents/ppi-variant-tracker-manuscript/code/stancode/multivariate_variant_multinomial_ncp_HV.stan', line 132, column 19 to line 169, column 3)",
  " (in '/Users/kjohnson/Documents/ppi-variant-tracker-manuscript/code/stancode/multivariate_variant_multinomial_ncp_HV.stan', line 132, column 2 to line 169, column 3)",
  " (in '/Users/kjohnson/Documents/ppi-variant-tracker-manuscript/code/stancode/multivariate_variant_multinomial_ncp_HV.stan', line 179, column 2 to column 30)",
  " (in '/Users/kjohnson/Documents/ppi-variant-tracker-manuscript/code/stancode/multivariate_variant_multinomial_ncp_HV.stan', line 180, column 2 to column 26)",
  " (in '/Users/kjohnson/Documents/ppi-variant-tracker-manuscript/code/stancode/multivariate_variant_multinomial_ncp_HV.stan', line 181, column 2 to column 33)",
  " (in '/Users/kjohnson/Documents/ppi-variant-tracker-manuscript/code/stancode/multivariate_variant_multinomial_ncp_HV.stan', line 186, column 2 to column 52)",
  " (in '/Users/kjohnson/Documents/ppi-variant-tracker-manuscript/code/stancode/multivariate_variant_multinomial_ncp_HV.stan', line 191, column 2 to column 31)",
  " (in '/Users/kjohnson/Documents/ppi-variant-tracker-manuscript/code/stancode/multivariate_variant_multinomial_ncp_HV.stan', line 192, column 2 to column 37)",
  " (in '/Users/kjohnson/Documents/ppi-variant-tracker-manuscript/code/stancode/multivariate_variant_multinomial_ncp_HV.stan', line 196, column 2 to column 33)",
  " (in '/Users/kjohnson/Documents/ppi-variant-tracker-manuscript/code/stancode/multivariate_variant_multinomial_ncp_HV.stan', line 197, column 2 to column 23)",
  " (in '/Users/kjohnson/Documents/ppi-variant-tracker-manuscript/code/stancode/multivariate_variant_multinomial_ncp_HV.stan', line 199, column 2 to column 36)",
  " (in '/Users/kjohnson/Documents/ppi-variant-tracker-manuscript/code/stancode/multivariate_variant_multinomial_ncp_HV.stan', line 3, column 2 to column 17)",
  " (in '/Users/kjohnson/Documents/ppi-variant-tracker-manuscript/code/stancode/multivariate_variant_multinomial_ncp_HV.stan', line 4, column 2 to column 24)",
  " (in '/Users/kjohnson/Documents/ppi-variant-tracker-manuscript/code/stancode/multivariate_variant_multinomial_ncp_HV.stan', line 5, column 2 to column 19)",
  " (in '/Users/kjohnson/Documents/ppi-variant-tracker-manuscript/code/stancode/multivariate_variant_multinomial_ncp_HV.stan', line 6, column 2 to column 20)",
  " (in '/Users/kjohnson/Documents/ppi-variant-tracker-manuscript/code/stancode/multivariate_variant_multinomial_ncp_HV.stan', line 7, column 8 to column 9)",
  " (in '/Users/kjohnson/Documents/ppi-variant-tracker-manuscript/code/stancode/multivariate_variant_multinomial_ncp_HV.stan', line 7, column 11 to column 12)",
  " (in '/Users/kjohnson/Documents/ppi-variant-tracker-manuscript/code/stancode/multivariate_variant_multinomial_ncp_HV.stan', line 7, column 14 to column 18)",
  " (in '/Users/kjohnson/Documents/ppi-variant-tracker-manuscript/code/stancode/multivariate_variant_multinomial_ncp_HV.stan', line 7, column 2 to column 20)",
  " (in '/Users/kjohnson/Documents/ppi-variant-tracker-manuscript/code/stancode/multivariate_variant_multinomial_ncp_HV.stan', line 8, column 13 to column 14)",
  " (in '/Users/kjohnson/Documents/ppi-variant-tracker-manuscript/code/stancode/multivariate_variant_multinomial_ncp_HV.stan', line 8, column 16 to column 17)",
  " (in '/Users/kjohnson/Documents/ppi-variant-tracker-manuscript/code/stancode/multivariate_variant_multinomial_ncp_HV.stan', line 8, column 2 to column 19)",
  " (in '/Users/kjohnson/Documents/ppi-variant-tracker-manuscript/code/stancode/multivariate_variant_multinomial_ncp_HV.stan', line 9, column 2 to column 17)",
  " (in '/Users/kjohnson/Documents/ppi-variant-tracker-manuscript/code/stancode/multivariate_variant_multinomial_ncp_HV.stan', line 10, column 2 to column 23)",
  " (in '/Users/kjohnson/Documents/ppi-variant-tracker-manuscript/code/stancode/multivariate_variant_multinomial_ncp_HV.stan', line 11, column 17 to column 18)",
  " (in '/Users/kjohnson/Documents/ppi-variant-tracker-manuscript/code/stancode/multivariate_variant_multinomial_ncp_HV.stan', line 11, column 20 to column 28)",
  " (in '/Users/kjohnson/Documents/ppi-variant-tracker-manuscript/code/stancode/multivariate_variant_multinomial_ncp_HV.stan', line 11, column 2 to column 30)",
  " (in '/Users/kjohnson/Documents/ppi-variant-tracker-manuscript/code/stancode/multivariate_variant_multinomial_ncp_HV.stan', line 22, column 2 to column 23)",
  " (in '/Users/kjohnson/Documents/ppi-variant-tracker-manuscript/code/stancode/multivariate_variant_multinomial_ncp_HV.stan', line 27, column 9 to column 27)",
  " (in '/Users/kjohnson/Documents/ppi-variant-tracker-manuscript/code/stancode/multivariate_variant_multinomial_ncp_HV.stan', line 27, column 2 to column 37)",
  " (in '/Users/kjohnson/Documents/ppi-variant-tracker-manuscript/code/stancode/multivariate_variant_multinomial_ncp_HV.stan', line 28, column 9 to column 27)",
  " (in '/Users/kjohnson/Documents/ppi-variant-tracker-manuscript/code/stancode/multivariate_variant_multinomial_ncp_HV.stan', line 28, column 2 to column 31)",
  " (in '/Users/kjohnson/Documents/ppi-variant-tracker-manuscript/code/stancode/multivariate_variant_multinomial_ncp_HV.stan', line 29, column 2 to column 14)",
  " (in '/Users/kjohnson/Documents/ppi-variant-tracker-manuscript/code/stancode/multivariate_variant_multinomial_ncp_HV.stan', line 30, column 2 to column 12)",
  " (in '/Users/kjohnson/Documents/ppi-variant-tracker-manuscript/code/stancode/multivariate_variant_multinomial_ncp_HV.stan', line 39, column 6 to column 15)",
  " (in '/Users/kjohnson/Documents/ppi-variant-tracker-manuscript/code/stancode/multivariate_variant_multinomial_ncp_HV.stan', line 37, column 32 to line 40, column 3)",
  " (in '/Users/kjohnson/Documents/ppi-variant-tracker-manuscript/code/stancode/multivariate_variant_multinomial_ncp_HV.stan', line 37, column 2 to line 40, column 3)",
  " (in '/Users/kjohnson/Documents/ppi-variant-tracker-manuscript/code/stancode/multivariate_variant_multinomial_ncp_HV.stan', line 47, column 2 to column 24)",
  " (in '/Users/kjohnson/Documents/ppi-variant-tracker-manuscript/code/stancode/multivariate_variant_multinomial_ncp_HV.stan', line 48, column 2 to column 20)",
  " (in '/Users/kjohnson/Documents/ppi-variant-tracker-manuscript/code/stancode/multivariate_variant_multinomial_ncp_HV.stan', line 51, column 2 to column 32)",
  " (in '/Users/kjohnson/Documents/ppi-variant-tracker-manuscript/code/stancode/multivariate_variant_multinomial_ncp_HV.stan', line 54, column 2 to column 19)",
  " (in '/Users/kjohnson/Documents/ppi-variant-tracker-manuscript/code/stancode/multivariate_variant_multinomial_ncp_HV.stan', line 64, column 9 to column 14)",
  " (in '/Users/kjohnson/Documents/ppi-variant-tracker-manuscript/code/stancode/multivariate_variant_multinomial_ncp_HV.stan', line 72, column 23 to column 28)",
  " (in '/Users/kjohnson/Documents/ppi-variant-tracker-manuscript/code/stancode/multivariate_variant_multinomial_ncp_HV.stan', line 73, column 18 to column 23)",
  " (in '/Users/kjohnson/Documents/ppi-variant-tracker-manuscript/code/stancode/multivariate_variant_multinomial_ncp_HV.stan', line 74, column 9 to column 14)",
  " (in '/Users/kjohnson/Documents/ppi-variant-tracker-manuscript/code/stancode/multivariate_variant_multinomial_ncp_HV.stan', line 74, column 16 to column 17)",
  " (in '/Users/kjohnson/Documents/ppi-variant-tracker-manuscript/code/stancode/multivariate_variant_multinomial_ncp_HV.stan', line 84, column 9 to column 14)",
  " (in '/Users/kjohnson/Documents/ppi-variant-tracker-manuscript/code/stancode/multivariate_variant_multinomial_ncp_HV.stan', line 85, column 20 to column 25)",
  " (in '/Users/kjohnson/Documents/ppi-variant-tracker-manuscript/code/stancode/multivariate_variant_multinomial_ncp_HV.stan', line 86, column 9 to column 14)",
  " (in '/Users/kjohnson/Documents/ppi-variant-tracker-manuscript/code/stancode/multivariate_variant_multinomial_ncp_HV.stan', line 86, column 16 to column 17)",
  " (in '/Users/kjohnson/Documents/ppi-variant-tracker-manuscript/code/stancode/multivariate_variant_multinomial_ncp_HV.stan', line 97, column 9 to column 14)",
  " (in '/Users/kjohnson/Documents/ppi-variant-tracker-manuscript/code/stancode/multivariate_variant_multinomial_ncp_HV.stan', line 97, column 16 to column 17)",
  " (in '/Users/kjohnson/Documents/ppi-variant-tracker-manuscript/code/stancode/multivariate_variant_multinomial_ncp_HV.stan', line 98, column 9 to column 14)",
  " (in '/Users/kjohnson/Documents/ppi-variant-tracker-manuscript/code/stancode/multivariate_variant_multinomial_ncp_HV.stan', line 98, column 16 to column 17)",
  " (in '/Users/kjohnson/Documents/ppi-variant-tracker-manuscript/code/stancode/multivariate_variant_multinomial_ncp_HV.stan', line 209, column 41 to column 42)",
  " (in '/Users/kjohnson/Documents/ppi-variant-tracker-manuscript/code/stancode/multivariate_variant_multinomial_ncp_HV.stan', line 209, column 9 to column 27)",
  " (in '/Users/kjohnson/Documents/ppi-variant-tracker-manuscript/code/stancode/multivariate_variant_multinomial_ncp_HV.stan', line 209, column 29 to column 33)",
  " (in '/Users/kjohnson/Documents/ppi-variant-tracker-manuscript/code/stancode/multivariate_variant_multinomial_ncp_HV.stan', line 212, column 14 to column 15)",
  " (in '/Users/kjohnson/Documents/ppi-variant-tracker-manuscript/code/stancode/multivariate_variant_multinomial_ncp_HV.stan', line 212, column 17 to column 35)",
  " (in '/Users/kjohnson/Documents/ppi-variant-tracker-manuscript/code/stancode/multivariate_variant_multinomial_ncp_HV.stan', line 212, column 37 to column 41)",
  " (in '/Users/kjohnson/Documents/ppi-variant-tracker-manuscript/code/stancode/multivariate_variant_multinomial_ncp_HV.stan', line 217, column 9 to column 14)",
  " (in '/Users/kjohnson/Documents/ppi-variant-tracker-manuscript/code/stancode/multivariate_variant_multinomial_ncp_HV.stan', line 217, column 16 to column 21)",
  " (in '/Users/kjohnson/Documents/ppi-variant-tracker-manuscript/code/stancode/multivariate_variant_multinomial_ncp_HV.stan', line 219, column 9 to column 14)",
  " (in '/Users/kjohnson/Documents/ppi-variant-tracker-manuscript/code/stancode/multivariate_variant_multinomial_ncp_HV.stan', line 219, column 16 to column 17)",
  " (in '/Users/kjohnson/Documents/ppi-variant-tracker-manuscript/code/stancode/multivariate_variant_multinomial_ncp_HV.stan', line 220, column 9 to column 14)"};
class multivariate_variant_multinomial_ncp_HV_model final : public model_base_crtp<multivariate_variant_multinomial_ncp_HV_model> {
 private:
  int N;
  int N_future;
  int K;
  int ncat;
  std::vector<std::vector<std::vector<int>>> Y;
  std::vector<std::vector<int>> trials;
  int prior_only;
  int num_days_nowcast;
  std::vector<std::vector<int>> fut_trials;
  int ncomp;
  Eigen::Matrix<double,-1,1> t_scale_data__;
  Eigen::Matrix<double,-1,1> t_data__;
  double mean_t;
  double sd_t;
  int p_hat_2dim__;
  int Y_tilde_2dim__;
  Eigen::Map<Eigen::Matrix<double,-1,1>> t_scale{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> t{nullptr, 0};
 public:
  ~multivariate_variant_multinomial_ncp_HV_model() {}
  multivariate_variant_multinomial_ncp_HV_model(stan::io::var_context&
                                                context__, unsigned int
                                                random_seed__ = 0,
                                                std::ostream*
                                                pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "multivariate_variant_multinomial_ncp_HV_model_namespace::multivariate_variant_multinomial_ncp_HV_model";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 72;
      context__.validate_dims("data initialization", "N", "int",
        std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      current_statement__ = 72;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 72;
      stan::math::check_greater_or_equal(function__, "N", N, 1);
      current_statement__ = 73;
      context__.validate_dims("data initialization", "N_future", "int",
        std::vector<size_t>{});
      N_future = std::numeric_limits<int>::min();
      current_statement__ = 73;
      N_future = context__.vals_i("N_future")[(1 - 1)];
      current_statement__ = 73;
      stan::math::check_greater_or_equal(function__, "N_future", N_future, 1);
      current_statement__ = 74;
      context__.validate_dims("data initialization", "K", "int",
        std::vector<size_t>{});
      K = std::numeric_limits<int>::min();
      current_statement__ = 74;
      K = context__.vals_i("K")[(1 - 1)];
      current_statement__ = 74;
      stan::math::check_greater_or_equal(function__, "K", K, 2);
      current_statement__ = 75;
      context__.validate_dims("data initialization", "ncat", "int",
        std::vector<size_t>{});
      ncat = std::numeric_limits<int>::min();
      current_statement__ = 75;
      ncat = context__.vals_i("ncat")[(1 - 1)];
      current_statement__ = 75;
      stan::math::check_greater_or_equal(function__, "ncat", ncat, 2);
      current_statement__ = 76;
      stan::math::validate_non_negative_index("Y", "K", K);
      current_statement__ = 77;
      stan::math::validate_non_negative_index("Y", "N", N);
      current_statement__ = 78;
      stan::math::validate_non_negative_index("Y", "ncat", ncat);
      current_statement__ = 79;
      context__.validate_dims("data initialization", "Y", "int",
        std::vector<size_t>{static_cast<size_t>(K), static_cast<size_t>(N),
          static_cast<size_t>(ncat)});
      Y = std::vector<std::vector<std::vector<int>>>(K,
            std::vector<std::vector<int>>(N,
              std::vector<int>(ncat, std::numeric_limits<int>::min())));
      {
        std::vector<int> Y_flat__;
        current_statement__ = 79;
        Y_flat__ = context__.vals_i("Y");
        current_statement__ = 79;
        pos__ = 1;
        current_statement__ = 79;
        for (int sym1__ = 1; sym1__ <= ncat; ++sym1__) {
          current_statement__ = 79;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 79;
            for (int sym3__ = 1; sym3__ <= K; ++sym3__) {
              current_statement__ = 79;
              stan::model::assign(Y, Y_flat__[(pos__ - 1)],
                "assigning variable Y", stan::model::index_uni(sym3__),
                stan::model::index_uni(sym2__),
                stan::model::index_uni(sym1__));
              current_statement__ = 79;
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      current_statement__ = 80;
      stan::math::validate_non_negative_index("trials", "K", K);
      current_statement__ = 81;
      stan::math::validate_non_negative_index("trials", "N", N);
      current_statement__ = 82;
      context__.validate_dims("data initialization", "trials", "int",
        std::vector<size_t>{static_cast<size_t>(K), static_cast<size_t>(N)});
      trials = std::vector<std::vector<int>>(K,
                 std::vector<int>(N, std::numeric_limits<int>::min()));
      {
        std::vector<int> trials_flat__;
        current_statement__ = 82;
        trials_flat__ = context__.vals_i("trials");
        current_statement__ = 82;
        pos__ = 1;
        current_statement__ = 82;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 82;
          for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
            current_statement__ = 82;
            stan::model::assign(trials, trials_flat__[(pos__ - 1)],
              "assigning variable trials", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 82;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 83;
      context__.validate_dims("data initialization", "prior_only", "int",
        std::vector<size_t>{});
      prior_only = std::numeric_limits<int>::min();
      current_statement__ = 83;
      prior_only = context__.vals_i("prior_only")[(1 - 1)];
      current_statement__ = 84;
      context__.validate_dims("data initialization", "num_days_nowcast",
        "int", std::vector<size_t>{});
      num_days_nowcast = std::numeric_limits<int>::min();
      current_statement__ = 84;
      num_days_nowcast = context__.vals_i("num_days_nowcast")[(1 - 1)];
      current_statement__ = 85;
      stan::math::validate_non_negative_index("fut_trials", "K", K);
      current_statement__ = 86;
      stan::math::validate_non_negative_index("fut_trials", "N_future",
        N_future);
      current_statement__ = 87;
      context__.validate_dims("data initialization", "fut_trials", "int",
        std::vector<size_t>{static_cast<size_t>(K),
          static_cast<size_t>(N_future)});
      fut_trials = std::vector<std::vector<int>>(K,
                     std::vector<int>(N_future,
                       std::numeric_limits<int>::min()));
      {
        std::vector<int> fut_trials_flat__;
        current_statement__ = 87;
        fut_trials_flat__ = context__.vals_i("fut_trials");
        current_statement__ = 87;
        pos__ = 1;
        current_statement__ = 87;
        for (int sym1__ = 1; sym1__ <= N_future; ++sym1__) {
          current_statement__ = 87;
          for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
            current_statement__ = 87;
            stan::model::assign(fut_trials, fut_trials_flat__[(pos__ - 1)],
              "assigning variable fut_trials",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            current_statement__ = 87;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 88;
      ncomp = std::numeric_limits<int>::min();
      current_statement__ = 89;
      stan::math::validate_non_negative_index("t_scale",
        "N + num_days_nowcast", (N + num_days_nowcast));
      current_statement__ = 90;
      t_scale_data__ = Eigen::Matrix<double,-1,1>::Constant((N +
                         num_days_nowcast),
                         std::numeric_limits<double>::quiet_NaN());
      new (&t_scale)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(t_scale_data__.data(), (N +
        num_days_nowcast));
      current_statement__ = 91;
      stan::math::validate_non_negative_index("t", "N + num_days_nowcast", (N
        + num_days_nowcast));
      current_statement__ = 92;
      t_data__ = Eigen::Matrix<double,-1,1>::Constant((N + num_days_nowcast),
                   std::numeric_limits<double>::quiet_NaN());
      new (&t) Eigen::Map<Eigen::Matrix<double,-1,1>>(t_data__.data(), (N +
        num_days_nowcast));
      current_statement__ = 93;
      mean_t = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 94;
      sd_t = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 97;
      for (int i = 1; i <= (N + num_days_nowcast); ++i) {
        current_statement__ = 95;
        stan::model::assign(t, i, "assigning variable t",
          stan::model::index_uni(i));
      }
      current_statement__ = 98;
      mean_t = stan::math::mean(
                 stan::model::rvalue(t, "t", stan::model::index_min_max(1, N)));
      current_statement__ = 99;
      sd_t = stan::math::sd(
               stan::model::rvalue(t, "t", stan::model::index_min_max(1, N)));
      current_statement__ = 100;
      stan::model::assign(t_scale,
        stan::math::divide(stan::math::subtract(t, mean_t), sd_t),
        "assigning variable t_scale");
      current_statement__ = 101;
      ncomp = (ncat - 1);
      current_statement__ = 88;
      stan::math::check_greater_or_equal(function__, "ncomp", ncomp, 1);
      current_statement__ = 102;
      stan::math::validate_non_negative_index("mu_r", "ncomp", ncomp);
      current_statement__ = 103;
      stan::math::validate_non_negative_index("L_Omega", "ncomp", ncomp);
      current_statement__ = 103;
      stan::math::validate_non_negative_index("L_Omega", "ncomp", ncomp);
      current_statement__ = 104;
      stan::math::validate_non_negative_index("tau", "ncomp", ncomp);
      current_statement__ = 105;
      stan::math::validate_non_negative_index("z_omega", "ncomp", ncomp);
      current_statement__ = 106;
      stan::math::validate_non_negative_index("z_omega", "K", K);
      current_statement__ = 107;
      stan::math::validate_non_negative_index("mu_b0", "ncomp", ncomp);
      current_statement__ = 108;
      stan::math::validate_non_negative_index("sigma_b0", "ncomp", ncomp);
      current_statement__ = 109;
      stan::math::validate_non_negative_index("z_b0", "ncomp", ncomp);
      current_statement__ = 110;
      stan::math::validate_non_negative_index("z_b0", "K", K);
      current_statement__ = 111;
      stan::math::validate_non_negative_index("b0", "ncomp", ncomp);
      current_statement__ = 112;
      stan::math::validate_non_negative_index("b0", "K", K);
      current_statement__ = 113;
      stan::math::validate_non_negative_index("r_scaled", "ncomp", ncomp);
      current_statement__ = 114;
      stan::math::validate_non_negative_index("r_scaled", "K", K);
      current_statement__ = 115;
      stan::math::validate_non_negative_index("p_hat", "K", K);
      current_statement__ = 116;
      p_hat_2dim__ = std::numeric_limits<int>::min();
      current_statement__ = 116;
      p_hat_2dim__ = (N + num_days_nowcast);
      current_statement__ = 116;
      stan::math::validate_non_negative_index("p_hat",
        "N + num_days_nowcast", p_hat_2dim__);
      current_statement__ = 117;
      stan::math::validate_non_negative_index("p_hat", "ncat", ncat);
      current_statement__ = 118;
      stan::math::validate_non_negative_index("Y_tilde", "K", K);
      current_statement__ = 119;
      Y_tilde_2dim__ = std::numeric_limits<int>::min();
      current_statement__ = 119;
      Y_tilde_2dim__ = (N + num_days_nowcast);
      current_statement__ = 119;
      stan::math::validate_non_negative_index("Y_tilde",
        "N + num_days_nowcast", Y_tilde_2dim__);
      current_statement__ = 120;
      stan::math::validate_non_negative_index("Y_tilde", "ncat", ncat);
      current_statement__ = 121;
      stan::math::validate_non_negative_index("Omega_hat", "ncomp", ncomp);
      current_statement__ = 122;
      stan::math::validate_non_negative_index("Omega_hat", "ncomp", ncomp);
      current_statement__ = 123;
      stan::math::validate_non_negative_index("r_hat", "ncomp", ncomp);
      current_statement__ = 124;
      stan::math::validate_non_negative_index("r_hat", "K", K);
      current_statement__ = 125;
      stan::math::validate_non_negative_index("mu_hat", "ncomp", ncomp);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = ncomp + 1 + 1 + ((ncomp * (ncomp - 1)) / 2) + ncomp +
      (ncomp * K) + ncomp + ncomp + (ncomp * K);
  }
  inline std::string model_name() const final {
    return "multivariate_variant_multinomial_ncp_HV_model";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.31.0-68-gbd516d56",
             "stancflags = "};
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "multivariate_variant_multinomial_ncp_HV_model_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<local_scalar_t__,-1,1> mu_r =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(ncomp, DUMMY_VAR__);
      current_statement__ = 1;
      mu_r = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(ncomp);
      local_scalar_t__ mu_hier_raw = DUMMY_VAR__;
      current_statement__ = 2;
      mu_hier_raw = in__.template read<local_scalar_t__>();
      local_scalar_t__ sigma_hierarchical = DUMMY_VAR__;
      current_statement__ = 3;
      sigma_hierarchical = in__.template read_constrain_lb<local_scalar_t__,
                             jacobian__>(0, lp__);
      Eigen::Matrix<local_scalar_t__,-1,-1> L_Omega =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(ncomp, ncomp,
          DUMMY_VAR__);
      current_statement__ = 4;
      L_Omega = in__.template read_constrain_cholesky_factor_corr<
                  Eigen::Matrix<local_scalar_t__,-1,-1>, jacobian__>(lp__,
                  ncomp);
      Eigen::Matrix<local_scalar_t__,-1,1> tau =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(ncomp, DUMMY_VAR__);
      current_statement__ = 5;
      tau = in__.template read_constrain_lb<
              Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, lp__,
              ncomp);
      Eigen::Matrix<local_scalar_t__,-1,-1> z_omega =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(ncomp, K,
          DUMMY_VAR__);
      current_statement__ = 6;
      z_omega = in__.template read<
                  Eigen::Matrix<local_scalar_t__,-1,-1>>(ncomp, K);
      Eigen::Matrix<local_scalar_t__,-1,1> mu_b0 =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(ncomp, DUMMY_VAR__);
      current_statement__ = 7;
      mu_b0 = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(ncomp);
      Eigen::Matrix<local_scalar_t__,-1,1> sigma_b0 =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(ncomp, DUMMY_VAR__);
      current_statement__ = 8;
      sigma_b0 = in__.template read_constrain_lb<
                   Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, lp__,
                   ncomp);
      Eigen::Matrix<local_scalar_t__,-1,-1> z_b0 =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(ncomp, K,
          DUMMY_VAR__);
      current_statement__ = 9;
      z_b0 = in__.template read<Eigen::Matrix<local_scalar_t__,-1,-1>>(ncomp,
               K);
      local_scalar_t__ mu_hier_scaled = DUMMY_VAR__;
      Eigen::Matrix<local_scalar_t__,-1,-1> b0 =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(ncomp, K,
          DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,-1> r_scaled =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(ncomp, K,
          DUMMY_VAR__);
      current_statement__ = 13;
      mu_hier_scaled = (mu_hier_raw * 0.1);
      current_statement__ = 14;
      stan::model::assign(b0,
        stan::math::add(stan::math::rep_matrix(mu_b0, K),
          stan::math::elt_multiply(stan::math::rep_matrix(sigma_b0, K), z_b0)),
        "assigning variable b0");
      current_statement__ = 15;
      stan::model::assign(r_scaled,
        stan::math::add(stan::math::rep_matrix(mu_r, K),
          stan::math::multiply(stan::math::diag_pre_multiply(tau, L_Omega),
            z_omega)), "assigning variable r_scaled");
      {
        current_statement__ = 62;
        if (stan::math::logical_negation(prior_only)) {
          current_statement__ = 44;
          stan::math::validate_non_negative_index("b0_k", "ncomp", ncomp);
          Eigen::Matrix<local_scalar_t__,-1,1> b0_k =
            Eigen::Matrix<local_scalar_t__,-1,1>::Constant(ncomp,
              DUMMY_VAR__);
          current_statement__ = 46;
          stan::math::validate_non_negative_index("r_k", "ncomp", ncomp);
          Eigen::Matrix<local_scalar_t__,-1,1> r_k =
            Eigen::Matrix<local_scalar_t__,-1,1>::Constant(ncomp,
              DUMMY_VAR__);
          current_statement__ = 48;
          stan::math::validate_non_negative_index("eta", "ncat", ncat);
          Eigen::Matrix<local_scalar_t__,-1,1> eta =
            Eigen::Matrix<local_scalar_t__,-1,1>::Constant(ncat, DUMMY_VAR__);
          current_statement__ = 60;
          for (int k = 1; k <= K; ++k) {
            current_statement__ = 50;
            stan::model::assign(b0_k,
              stan::math::to_vector(
                stan::model::rvalue(b0, "b0", stan::model::index_omni(),
                  stan::model::index_uni(k))), "assigning variable b0_k");
            current_statement__ = 51;
            stan::model::assign(r_k,
              stan::math::to_vector(
                stan::model::rvalue(r_scaled, "r_scaled",
                  stan::model::index_omni(), stan::model::index_uni(k))),
              "assigning variable r_k");
            current_statement__ = 58;
            for (int i = 1; i <= N; ++i) {
              current_statement__ = 56;
              if (stan::math::logical_gt(
                    stan::model::rvalue(trials, "trials",
                      stan::model::index_uni(k), stan::model::index_uni(i)),
                    0)) {
                current_statement__ = 52;
                stan::model::assign(eta, 0, "assigning variable eta",
                  stan::model::index_uni(1));
                current_statement__ = 53;
                stan::model::assign(eta,
                  stan::math::add(b0_k,
                    stan::math::multiply(r_k,
                      stan::model::rvalue(t_scale, "t_scale",
                        stan::model::index_uni(i)))),
                  "assigning variable eta",
                  stan::model::index_min_max(2, ncat));
                current_statement__ = 54;
                lp_accum__.add(stan::math::multinomial_lpmf<propto__>(
                                 stan::model::rvalue(Y, "Y",
                                   stan::model::index_uni(k),
                                   stan::model::index_uni(i)),
                                 stan::math::softmax(eta)));
              }
            }
          }
        }
        current_statement__ = 63;
        lp_accum__.add(stan::math::student_t_lpdf<propto__>(mu_b0, 3, -5, 5));
        current_statement__ = 64;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(sigma_b0, 2, 1));
        current_statement__ = 65;
        lp_accum__.add(stan::math::std_normal_lpdf<propto__>(
                         stan::math::to_vector(z_b0)));
        current_statement__ = 66;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(mu_r,
                         mu_hier_scaled, sigma_hierarchical));
        current_statement__ = 67;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(mu_hier_raw, -1, .5));
        current_statement__ = 68;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(sigma_hierarchical,
                         1, .1));
        current_statement__ = 69;
        lp_accum__.add(stan::math::lkj_corr_cholesky_lpdf<propto__>(L_Omega,
                         2));
        current_statement__ = 70;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(tau, .5, .2));
        current_statement__ = 71;
        lp_accum__.add(stan::math::std_normal_lpdf<propto__>(
                         stan::math::to_vector(z_omega)));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    static constexpr const char* function__ =
      "multivariate_variant_multinomial_ncp_HV_model_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<double,-1,1> mu_r =
        Eigen::Matrix<double,-1,1>::Constant(ncomp,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 1;
      mu_r = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(ncomp);
      double mu_hier_raw = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 2;
      mu_hier_raw = in__.template read<local_scalar_t__>();
      double sigma_hierarchical = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 3;
      sigma_hierarchical = in__.template read_constrain_lb<local_scalar_t__,
                             jacobian__>(0, lp__);
      Eigen::Matrix<double,-1,-1> L_Omega =
        Eigen::Matrix<double,-1,-1>::Constant(ncomp, ncomp,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 4;
      L_Omega = in__.template read_constrain_cholesky_factor_corr<
                  Eigen::Matrix<local_scalar_t__,-1,-1>, jacobian__>(lp__,
                  ncomp);
      Eigen::Matrix<double,-1,1> tau =
        Eigen::Matrix<double,-1,1>::Constant(ncomp,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 5;
      tau = in__.template read_constrain_lb<
              Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, lp__,
              ncomp);
      Eigen::Matrix<double,-1,-1> z_omega =
        Eigen::Matrix<double,-1,-1>::Constant(ncomp, K,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 6;
      z_omega = in__.template read<
                  Eigen::Matrix<local_scalar_t__,-1,-1>>(ncomp, K);
      Eigen::Matrix<double,-1,1> mu_b0 =
        Eigen::Matrix<double,-1,1>::Constant(ncomp,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 7;
      mu_b0 = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(ncomp);
      Eigen::Matrix<double,-1,1> sigma_b0 =
        Eigen::Matrix<double,-1,1>::Constant(ncomp,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 8;
      sigma_b0 = in__.template read_constrain_lb<
                   Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, lp__,
                   ncomp);
      Eigen::Matrix<double,-1,-1> z_b0 =
        Eigen::Matrix<double,-1,-1>::Constant(ncomp, K,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 9;
      z_b0 = in__.template read<Eigen::Matrix<local_scalar_t__,-1,-1>>(ncomp,
               K);
      double mu_hier_scaled = std::numeric_limits<double>::quiet_NaN();
      Eigen::Matrix<double,-1,-1> b0 =
        Eigen::Matrix<double,-1,-1>::Constant(ncomp, K,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,-1> r_scaled =
        Eigen::Matrix<double,-1,-1>::Constant(ncomp, K,
          std::numeric_limits<double>::quiet_NaN());
      out__.write(mu_r);
      out__.write(mu_hier_raw);
      out__.write(sigma_hierarchical);
      out__.write(L_Omega);
      out__.write(tau);
      out__.write(z_omega);
      out__.write(mu_b0);
      out__.write(sigma_b0);
      out__.write(z_b0);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      current_statement__ = 13;
      mu_hier_scaled = (mu_hier_raw * 0.1);
      current_statement__ = 14;
      stan::model::assign(b0,
        stan::math::add(stan::math::rep_matrix(mu_b0, K),
          stan::math::elt_multiply(stan::math::rep_matrix(sigma_b0, K), z_b0)),
        "assigning variable b0");
      current_statement__ = 15;
      stan::model::assign(r_scaled,
        stan::math::add(stan::math::rep_matrix(mu_r, K),
          stan::math::multiply(stan::math::diag_pre_multiply(tau, L_Omega),
            z_omega)), "assigning variable r_scaled");
      if (emit_transformed_parameters__) {
        out__.write(mu_hier_scaled);
        out__.write(b0);
        out__.write(r_scaled);
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
      std::vector<Eigen::Matrix<double,-1,-1>> p_hat =
        std::vector<Eigen::Matrix<double,-1,-1>>(K,
          Eigen::Matrix<double,-1,-1>::Constant(p_hat_2dim__, ncat,
            std::numeric_limits<double>::quiet_NaN()));
      std::vector<std::vector<std::vector<int>>> Y_tilde =
        std::vector<std::vector<std::vector<int>>>(K,
          std::vector<std::vector<int>>(Y_tilde_2dim__,
            std::vector<int>(ncat, std::numeric_limits<int>::min())));
      Eigen::Matrix<double,-1,-1> Omega_hat =
        Eigen::Matrix<double,-1,-1>::Constant(ncomp, ncomp,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,-1> r_hat =
        Eigen::Matrix<double,-1,-1>::Constant(ncomp, K,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> mu_hat =
        Eigen::Matrix<double,-1,1>::Constant(ncomp,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 21;
      stan::model::assign(Omega_hat,
        stan::math::multiply_lower_tri_self_transpose(L_Omega),
        "assigning variable Omega_hat");
      current_statement__ = 22;
      stan::model::assign(r_hat, stan::math::divide(r_scaled, sd_t),
        "assigning variable r_hat");
      current_statement__ = 23;
      stan::model::assign(mu_hat, stan::math::divide(mu_r, sd_t),
        "assigning variable mu_hat");
      current_statement__ = 43;
      for (int k = 1; k <= K; ++k) {
        current_statement__ = 24;
        stan::math::validate_non_negative_index("b0_k", "ncomp", ncomp);
        Eigen::Matrix<double,-1,1> b0_k =
          Eigen::Matrix<double,-1,1>::Constant(ncomp,
            std::numeric_limits<double>::quiet_NaN());
        current_statement__ = 26;
        stan::math::validate_non_negative_index("r_k", "ncomp", ncomp);
        Eigen::Matrix<double,-1,1> r_k =
          Eigen::Matrix<double,-1,1>::Constant(ncomp,
            std::numeric_limits<double>::quiet_NaN());
        current_statement__ = 28;
        stan::math::validate_non_negative_index("eta", "ncat", ncat);
        Eigen::Matrix<double,-1,1> eta =
          Eigen::Matrix<double,-1,1>::Constant(ncat,
            std::numeric_limits<double>::quiet_NaN());
        current_statement__ = 30;
        stan::model::assign(b0_k,
          stan::math::to_vector(
            stan::model::rvalue(b0, "b0", stan::model::index_omni(),
              stan::model::index_uni(k))), "assigning variable b0_k");
        current_statement__ = 31;
        stan::model::assign(r_k,
          stan::math::to_vector(
            stan::model::rvalue(r_scaled, "r_scaled",
              stan::model::index_omni(), stan::model::index_uni(k))),
          "assigning variable r_k");
        current_statement__ = 41;
        for (int i = 1; i <= (N + num_days_nowcast); ++i) {
          current_statement__ = 32;
          stan::model::assign(eta, 0, "assigning variable eta",
            stan::model::index_uni(1));
          current_statement__ = 33;
          stan::model::assign(eta,
            stan::math::add(b0_k,
              stan::math::multiply(r_k,
                stan::model::rvalue(t_scale, "t_scale",
                  stan::model::index_uni(i)))), "assigning variable eta",
            stan::model::index_min_max(2, ncat));
          current_statement__ = 34;
          stan::model::assign(p_hat,
            stan::math::to_row_vector(stan::math::softmax(eta)),
            "assigning variable p_hat", stan::model::index_uni(k),
            stan::model::index_uni(i));
          current_statement__ = 39;
          if (stan::math::logical_lte(i, N_future)) {
            current_statement__ = 37;
            if (stan::math::logical_gt(
                  stan::model::rvalue(fut_trials, "fut_trials",
                    stan::model::index_uni(k), stan::model::index_uni(i)), 0)) {
              current_statement__ = 35;
              stan::model::assign(Y_tilde,
                stan::math::multinomial_rng(stan::math::softmax(eta),
                  stan::model::rvalue(fut_trials, "fut_trials",
                    stan::model::index_uni(k), stan::model::index_uni(i)),
                  base_rng__), "assigning variable Y_tilde",
                stan::model::index_uni(k), stan::model::index_uni(i));
            }
          }
        }
      }
      for (int sym1__ = 1; sym1__ <= ncat; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= p_hat_2dim__; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= K; ++sym3__) {
            out__.write(stan::model::rvalue(p_hat, "p_hat",
                          stan::model::index_uni(sym3__),
                          stan::model::index_uni(sym2__),
                          stan::model::index_uni(sym1__)));
          }
        }
      }
      for (int sym1__ = 1; sym1__ <= ncat; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= Y_tilde_2dim__; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= K; ++sym3__) {
            out__.write(Y_tilde[(sym3__ - 1)][(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
      }
      out__.write(Omega_hat);
      out__.write(r_hat);
      out__.write(mu_hat);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  transform_inits_impl(VecVar& params_r__, VecI& params_i__, VecVar& vars__,
                       std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,1> mu_r =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(ncomp, DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= ncomp; ++sym1__) {
        stan::model::assign(mu_r, in__.read<local_scalar_t__>(),
          "assigning variable mu_r", stan::model::index_uni(sym1__));
      }
      out__.write(mu_r);
      local_scalar_t__ mu_hier_raw = DUMMY_VAR__;
      mu_hier_raw = in__.read<local_scalar_t__>();
      out__.write(mu_hier_raw);
      local_scalar_t__ sigma_hierarchical = DUMMY_VAR__;
      sigma_hierarchical = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sigma_hierarchical);
      Eigen::Matrix<local_scalar_t__,-1,-1> L_Omega =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(ncomp, ncomp,
          DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= ncomp; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= ncomp; ++sym2__) {
          stan::model::assign(L_Omega, in__.read<local_scalar_t__>(),
            "assigning variable L_Omega", stan::model::index_uni(sym2__),
            stan::model::index_uni(sym1__));
        }
      }
      out__.write_free_cholesky_factor_corr(L_Omega);
      Eigen::Matrix<local_scalar_t__,-1,1> tau =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(ncomp, DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= ncomp; ++sym1__) {
        stan::model::assign(tau, in__.read<local_scalar_t__>(),
          "assigning variable tau", stan::model::index_uni(sym1__));
      }
      out__.write_free_lb(0, tau);
      Eigen::Matrix<local_scalar_t__,-1,-1> z_omega =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(ncomp, K,
          DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= ncomp; ++sym2__) {
          stan::model::assign(z_omega, in__.read<local_scalar_t__>(),
            "assigning variable z_omega", stan::model::index_uni(sym2__),
            stan::model::index_uni(sym1__));
        }
      }
      out__.write(z_omega);
      Eigen::Matrix<local_scalar_t__,-1,1> mu_b0 =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(ncomp, DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= ncomp; ++sym1__) {
        stan::model::assign(mu_b0, in__.read<local_scalar_t__>(),
          "assigning variable mu_b0", stan::model::index_uni(sym1__));
      }
      out__.write(mu_b0);
      Eigen::Matrix<local_scalar_t__,-1,1> sigma_b0 =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(ncomp, DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= ncomp; ++sym1__) {
        stan::model::assign(sigma_b0, in__.read<local_scalar_t__>(),
          "assigning variable sigma_b0", stan::model::index_uni(sym1__));
      }
      out__.write_free_lb(0, sigma_b0);
      Eigen::Matrix<local_scalar_t__,-1,-1> z_b0 =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(ncomp, K,
          DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= ncomp; ++sym2__) {
          stan::model::assign(z_b0, in__.read<local_scalar_t__>(),
            "assigning variable z_b0", stan::model::index_uni(sym2__),
            stan::model::index_uni(sym1__));
        }
      }
      out__.write(z_b0);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void get_param_names(std::vector<std::string>& names__) const {
    names__ = std::vector<std::string>{"mu_r", "mu_hier_raw",
                "sigma_hierarchical", "L_Omega", "tau", "z_omega", "mu_b0",
                "sigma_b0", "z_b0", "mu_hier_scaled", "b0", "r_scaled",
                "p_hat", "Y_tilde", "Omega_hat", "r_hat", "mu_hat"};
  }
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{static_cast<
                                                                    size_t>(
                                                                    ncomp)},
                std::vector<size_t>{}, std::vector<size_t>{},
                std::vector<size_t>{static_cast<size_t>(ncomp),
                  static_cast<size_t>(ncomp)},
                std::vector<size_t>{static_cast<size_t>(ncomp)},
                std::vector<size_t>{static_cast<size_t>(ncomp),
                  static_cast<size_t>(K)},
                std::vector<size_t>{static_cast<size_t>(ncomp)},
                std::vector<size_t>{static_cast<size_t>(ncomp)},
                std::vector<size_t>{static_cast<size_t>(ncomp),
                  static_cast<size_t>(K)}, std::vector<size_t>{},
                std::vector<size_t>{static_cast<size_t>(ncomp),
                  static_cast<size_t>(K)},
                std::vector<size_t>{static_cast<size_t>(ncomp),
                  static_cast<size_t>(K)},
                std::vector<size_t>{static_cast<size_t>(K),
                  static_cast<size_t>(p_hat_2dim__),
                  static_cast<size_t>(ncat)},
                std::vector<size_t>{static_cast<size_t>(K),
                  static_cast<size_t>(Y_tilde_2dim__),
                  static_cast<size_t>(ncat)},
                std::vector<size_t>{static_cast<size_t>(ncomp),
                  static_cast<size_t>(ncomp)},
                std::vector<size_t>{static_cast<size_t>(ncomp),
                  static_cast<size_t>(K)},
                std::vector<size_t>{static_cast<size_t>(ncomp)}};
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= ncomp; ++sym1__) {
      param_names__.emplace_back(std::string() + "mu_r" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "mu_hier_raw");
    param_names__.emplace_back(std::string() + "sigma_hierarchical");
    for (int sym1__ = 1; sym1__ <= ncomp; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= ncomp; ++sym2__) {
        param_names__.emplace_back(std::string() + "L_Omega" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= ncomp; ++sym1__) {
      param_names__.emplace_back(std::string() + "tau" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= ncomp; ++sym2__) {
        param_names__.emplace_back(std::string() + "z_omega" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= ncomp; ++sym1__) {
      param_names__.emplace_back(std::string() + "mu_b0" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= ncomp; ++sym1__) {
      param_names__.emplace_back(std::string() + "sigma_b0" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= ncomp; ++sym2__) {
        param_names__.emplace_back(std::string() + "z_b0" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    if (emit_transformed_parameters__) {
      param_names__.emplace_back(std::string() + "mu_hier_scaled");
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= ncomp; ++sym2__) {
          param_names__.emplace_back(std::string() + "b0" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= ncomp; ++sym2__) {
          param_names__.emplace_back(std::string() + "r_scaled" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
    }
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= ncat; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= p_hat_2dim__; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= K; ++sym3__) {
            param_names__.emplace_back(std::string() + "p_hat" + '.' +
              std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' +
              std::to_string(sym1__));
          }
        }
      }
      for (int sym1__ = 1; sym1__ <= ncat; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= Y_tilde_2dim__; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= K; ++sym3__) {
            param_names__.emplace_back(std::string() + "Y_tilde" + '.' +
              std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' +
              std::to_string(sym1__));
          }
        }
      }
      for (int sym1__ = 1; sym1__ <= ncomp; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= ncomp; ++sym2__) {
          param_names__.emplace_back(std::string() + "Omega_hat" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= ncomp; ++sym2__) {
          param_names__.emplace_back(std::string() + "r_hat" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= ncomp; ++sym1__) {
        param_names__.emplace_back(std::string() + "mu_hat" + '.' +
          std::to_string(sym1__));
      }
    }
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= ncomp; ++sym1__) {
      param_names__.emplace_back(std::string() + "mu_r" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "mu_hier_raw");
    param_names__.emplace_back(std::string() + "sigma_hierarchical");
    for (int sym1__ = 1; sym1__ <= ((ncomp * (ncomp - 1)) / 2); ++sym1__) {
      param_names__.emplace_back(std::string() + "L_Omega" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= ncomp; ++sym1__) {
      param_names__.emplace_back(std::string() + "tau" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= ncomp; ++sym2__) {
        param_names__.emplace_back(std::string() + "z_omega" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= ncomp; ++sym1__) {
      param_names__.emplace_back(std::string() + "mu_b0" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= ncomp; ++sym1__) {
      param_names__.emplace_back(std::string() + "sigma_b0" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= ncomp; ++sym2__) {
        param_names__.emplace_back(std::string() + "z_b0" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    if (emit_transformed_parameters__) {
      param_names__.emplace_back(std::string() + "mu_hier_scaled");
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= ncomp; ++sym2__) {
          param_names__.emplace_back(std::string() + "b0" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= ncomp; ++sym2__) {
          param_names__.emplace_back(std::string() + "r_scaled" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
    }
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= ncat; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= p_hat_2dim__; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= K; ++sym3__) {
            param_names__.emplace_back(std::string() + "p_hat" + '.' +
              std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' +
              std::to_string(sym1__));
          }
        }
      }
      for (int sym1__ = 1; sym1__ <= ncat; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= Y_tilde_2dim__; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= K; ++sym3__) {
            param_names__.emplace_back(std::string() + "Y_tilde" + '.' +
              std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' +
              std::to_string(sym1__));
          }
        }
      }
      for (int sym1__ = 1; sym1__ <= ncomp; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= ncomp; ++sym2__) {
          param_names__.emplace_back(std::string() + "Omega_hat" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= ncomp; ++sym2__) {
          param_names__.emplace_back(std::string() + "r_hat" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= ncomp; ++sym1__) {
        param_names__.emplace_back(std::string() + "mu_hat" + '.' +
          std::to_string(sym1__));
      }
    }
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"mu_r\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(ncomp) + "},\"block\":\"parameters\"},{\"name\":\"mu_hier_raw\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_hierarchical\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"L_Omega\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(ncomp) + ",\"cols\":" + std::to_string(ncomp) + "},\"block\":\"parameters\"},{\"name\":\"tau\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(ncomp) + "},\"block\":\"parameters\"},{\"name\":\"z_omega\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(ncomp) + ",\"cols\":" + std::to_string(K) + "},\"block\":\"parameters\"},{\"name\":\"mu_b0\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(ncomp) + "},\"block\":\"parameters\"},{\"name\":\"sigma_b0\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(ncomp) + "},\"block\":\"parameters\"},{\"name\":\"z_b0\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(ncomp) + ",\"cols\":" + std::to_string(K) + "},\"block\":\"parameters\"},{\"name\":\"mu_hier_scaled\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"b0\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(ncomp) + ",\"cols\":" + std::to_string(K) + "},\"block\":\"transformed_parameters\"},{\"name\":\"r_scaled\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(ncomp) + ",\"cols\":" + std::to_string(K) + "},\"block\":\"transformed_parameters\"},{\"name\":\"p_hat\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(K) + ",\"element_type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(p_hat_2dim__) + ",\"cols\":" + std::to_string(ncat) + "}},\"block\":\"generated_quantities\"},{\"name\":\"Y_tilde\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(K) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(Y_tilde_2dim__) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(ncat) + ",\"element_type\":{\"name\":\"int\"}}}},\"block\":\"generated_quantities\"},{\"name\":\"Omega_hat\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(ncomp) + ",\"cols\":" + std::to_string(ncomp) + "},\"block\":\"generated_quantities\"},{\"name\":\"r_hat\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(ncomp) + ",\"cols\":" + std::to_string(K) + "},\"block\":\"generated_quantities\"},{\"name\":\"mu_hat\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(ncomp) + "},\"block\":\"generated_quantities\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"mu_r\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(ncomp) + "},\"block\":\"parameters\"},{\"name\":\"mu_hier_raw\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_hierarchical\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"L_Omega\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(((ncomp * (ncomp - 1)) /2)) + "},\"block\":\"parameters\"},{\"name\":\"tau\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(ncomp) + "},\"block\":\"parameters\"},{\"name\":\"z_omega\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(ncomp) + ",\"cols\":" + std::to_string(K) + "},\"block\":\"parameters\"},{\"name\":\"mu_b0\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(ncomp) + "},\"block\":\"parameters\"},{\"name\":\"sigma_b0\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(ncomp) + "},\"block\":\"parameters\"},{\"name\":\"z_b0\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(ncomp) + ",\"cols\":" + std::to_string(K) + "},\"block\":\"parameters\"},{\"name\":\"mu_hier_scaled\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"b0\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(ncomp) + ",\"cols\":" + std::to_string(K) + "},\"block\":\"transformed_parameters\"},{\"name\":\"r_scaled\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(ncomp) + ",\"cols\":" + std::to_string(K) + "},\"block\":\"transformed_parameters\"},{\"name\":\"p_hat\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(K) + ",\"element_type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(p_hat_2dim__) + ",\"cols\":" + std::to_string(ncat) + "}},\"block\":\"generated_quantities\"},{\"name\":\"Y_tilde\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(K) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(Y_tilde_2dim__) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(ncat) + ",\"element_type\":{\"name\":\"int\"}}}},\"block\":\"generated_quantities\"},{\"name\":\"Omega_hat\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(ncomp) + ",\"cols\":" + std::to_string(ncomp) + "},\"block\":\"generated_quantities\"},{\"name\":\"r_hat\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(ncomp) + ",\"cols\":" + std::to_string(K) + "},\"block\":\"generated_quantities\"},{\"name\":\"mu_hat\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(ncomp) + "},\"block\":\"generated_quantities\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((((((((ncomp + 1) + 1) + (ncomp * ncomp)) +
      ncomp) + (ncomp * K)) + ncomp) + ncomp) + (ncomp * K));
    const size_t num_transformed = emit_transformed_parameters * (((1 +
      (ncomp * K)) + (ncomp * K)));
    const size_t num_gen_quantities = emit_generated_quantities * (((((((K *
      p_hat_2dim__) * ncat) + ((K * Y_tilde_2dim__) * ncat)) + (ncomp *
      ncomp)) + (ncomp * K)) + ncomp));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((((((((ncomp + 1) + 1) + (ncomp * ncomp)) +
      ncomp) + (ncomp * K)) + ncomp) + ncomp) + (ncomp * K));
    const size_t num_transformed = emit_transformed_parameters * (((1 +
      (ncomp * K)) + (ncomp * K)));
    const size_t num_gen_quantities = emit_generated_quantities * (((((((K *
      p_hat_2dim__) * ncat) + ((K * Y_tilde_2dim__) * ncat)) + (ncomp *
      ncomp)) + (ncomp * K)) + ncomp));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    constexpr std::array<const char*, 9>
      names__{"mu_r", "mu_hier_raw", "sigma_hierarchical", "L_Omega", "tau",
              "z_omega", "mu_b0", "sigma_b0", "z_b0"};
    const std::array<Eigen::Index, 9>
      constrain_param_sizes__{ncomp, 1, 1, (ncomp * ncomp), ncomp, (ncomp *
                              K), ncomp, ncomp, (ncomp * K)};
    const auto num_constrained_params__ =
      std::accumulate(constrain_param_sizes__.begin(),
        constrain_param_sizes__.end(), 0);
    std::vector<double> params_r_flat__(num_constrained_params__);
    Eigen::Index size_iter__ = 0;
    Eigen::Index flat_iter__ = 0;
    for (auto&& param_name__: names__) {
      const auto param_vec__ = context.vals_r(param_name__);
      for (Eigen::Index i = 0; i < constrain_param_sizes__[size_iter__]; ++i) {
        params_r_flat__[flat_iter__] = param_vec__[i];
        ++flat_iter__;
      }
      ++size_iter__;
    }
    vars.resize(num_params_r__);
    transform_inits_impl(params_r_flat__, params_i, vars, pstream__);
  }
};
}
using stan_model = multivariate_variant_multinomial_ncp_HV_model_namespace::multivariate_variant_multinomial_ncp_HV_model;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return multivariate_variant_multinomial_ncp_HV_model_namespace::profiles__;
}
#endif